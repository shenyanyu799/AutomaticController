using LiteDB;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Policy;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AutomaticController.Windows.Demos.测试机通用界面.Pages
{
    /// <summary>
    /// 数据查询.xaml 的交互逻辑
    /// </summary>
    public partial class 数据查询 : Page
    {
        public 数据查询()
        {
            InitializeComponent();
            //添加首行序号
            DataGrid1.LoadingRow += (object sender, DataGridRowEventArgs e) =>
            {
                e.Row.Header = e.Row.GetIndex() + 1;
            };
            DataGrid1.AutoGeneratedColumns += (object sender, EventArgs e) =>
            {
                //UpdateColumnName(new string[] { "测试时间", "工位名", "测试流量(ml/min)", "测试结果" });
            };
            
            DataGrid1.ItemsSource = new List<UserData>();
            MainWindow.SNCodeReadEvent += t=> SNCodeText.Text = t;

            this.Loaded += (s, e) => {
                startTimeText.DateTime = DateTime.Now;
                endTimeText.DateTime = DateTime.Now;
                CompositionTarget.Rendering += CompositionTarget_Rendering;
            };
            this.Unloaded += (s, e) => {
                CompositionTarget.Rendering -= CompositionTarget_Rendering;
            };
        }


        private void CompositionTarget_Rendering(object sender, EventArgs e)
        {
            DatetimeText.Text = DateTime.Now.ToString();
        }


        #region 按钮事件


        //查询状态
        bool finding = false;

        /// <summary>
        /// SN码查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (finding)
            {
                MessageBox.Show("正在查询...");
                return;
            }
            finding = true;
            DataGrid1.ItemsSource = null;
            var sd = startTimeText.DateTime;
            var ed = endTimeText.DateTime;
            string code = SNCodeText.Text;
            Task.Run(() =>
            {
                List<UserData> users = new List<UserData>();
                using (LiteDatabase lite = new LiteDatabase(UserData.DBPath))
                {
                    var lst = lite.GetCollection<UserData>(UserData.TableName);
                    //时间范围搜索
                    users.AddRange(lst.Find(x => x.SN码 == code));
                }
                //转换并显示
                App.Current.Dispatcher.Invoke(
                    () =>
                    {
                        try
                        {
                            users.Reverse();//反转序列
                            DataGrid1.ItemsSource = users;
                            (DataGrid1.Columns[0] as DataGridTextColumn).Binding.StringFormat = "yyyy/MM/dd HH:mm:ss";
                        }
                        catch { }
                    });
                finding = false;
            });
        }
        /// <summary>
        /// 时间查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            if (finding)
            {
                MessageBox.Show("正在查询...");
                return;
            }
            finding = true;
            DataGrid1.ItemsSource = null;
            var sd = startTimeText.DateTime;
            var ed = endTimeText.DateTime;
            Task.Run(() =>
            {
                List<UserData> users = new List<UserData>();
                using (LiteDatabase lite = new LiteDatabase(UserData.DBPath))
                {
                    var lst = lite.GetCollection<UserData>(UserData.TableName);
                    //时间范围搜索
                    users.AddRange(lst.Find(x => sd <= x.测试时间 && x.测试时间 < ed));
                }
                //转换并显示
                App.Current.Dispatcher.Invoke(
                    () => {
                        try
                        {
                            users.Reverse();//反转序列
                            DataGrid1.ItemsSource = users;
                            (DataGrid1.Columns[0] as DataGridTextColumn).Binding.StringFormat = "yyyy/MM/dd HH:mm:ss";
                        }
                        catch { }
                    });
                finding = false;
            });
        }
        /// <summary>
        /// 全部查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            if (finding)
            {
                MessageBox.Show("正在查询...");
                return;
            }
            finding = true;
            DataGrid1.ItemsSource = null;
            var sd = startTimeText.DateTime;
            var ed = endTimeText.DateTime;
            Task.Run(() =>
            {
                List<UserData> users = new List<UserData>();
                users = UserData.DBFindAll();
                //转换并显示
                App.Current.Dispatcher.Invoke(
                    () => {
                        try
                        {
                            users.Reverse();//反转序列
                            DataGrid1.ItemsSource = users;
                            (DataGrid1.Columns[0] as DataGridTextColumn).Binding.StringFormat = "yyyy/MM/dd HH:mm:ss";
                        }
                        catch { }
                    });
                finding = false;
            });
        }
        /// <summary>
        /// 导出报表
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            if (finding)
            {
                MessageBox.Show("正在查询...");
                return;
            }
            Microsoft.Win32.SaveFileDialog saveFile = new Microsoft.Win32.SaveFileDialog();
            saveFile.Filter = "表格(*.csv)|*.csv";
            saveFile.Title = "导出数据";
            try
            {
                if (saveFile.ShowDialog() == true)
                {
                    using (FileStream fs = new FileStream(saveFile.FileName, FileMode.Create))
                    {
                        List<UserData> datas = (List<UserData>)DataGrid1.ItemsSource;
                        string s = "";
                        if (datas != null)
                        {
                            var ns = UserData.GetNames();
                            foreach (var item in ns)
                            {
                                s += $"\"{item}\",";
                            }
                        }
                        s = s.TrimEnd(',') + "\n";
                        byte[] bytes = Encoding.UTF8.GetBytes(s);
                        fs.Write(bytes, 0, bytes.Length);
                        foreach (var item in datas)
                        {
                            bytes = Encoding.UTF8.GetBytes(item.ToStringCSV() + "\n");
                            fs.Write(bytes, 0, bytes.Length);
                        }
                        fs.Close();
                        MessageBox.Show("导出完成");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }

        }
        /// <summary>
        /// 更新列名
        /// </summary>
        /// <param name="names"></param>
        public void UpdateColumnName(string[] names)
        {
            //设置列名
            int len = DataGrid1.Columns.Count;
            int min = Math.Min(names.Length, len);

            for (int i = 0; i < min; i++)
            {
                DataGrid1.Columns[i].Header = names[i];
            }
        }
        #endregion
        /// <summary>
        /// 表格菜单按钮点击事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            MenuItem menuItem = sender as MenuItem;
            string com = menuItem.CommandParameter.ToString();
            string copyt = "";
            switch (com)
            {
                case "copyC":
                    foreach (var item in DataGrid1.SelectedItems)
                    {
                        copyt += item.ToString() + "\n";
                    }
                    Clipboard.SetText(copyt);
                    break;
                case "copyL":
                    foreach (var item in DataGrid1.SelectedItems)
                    {
                        copyt = (item as UserData).图片路径.AbsolutePath;
                        break;
                    }
                    Clipboard.SetText(copyt);
                    break;
                case "openLD":
                    foreach (var item in DataGrid1.SelectedItems)
                    {
                        string path = System.IO.Path.GetFullPath((item as UserData).图片路径.AbsolutePath);
                        if(File.Exists(path))
                        {
                            Process.Start("explorer", "/select, " + path );
                        }
                        else
                        {
                            MessageBox.Show("文件不存在");
                        }
                        break;
                    }
                    break;
            }
        }
    }
    public partial class UserData
    {
        public DateTime 测试时间 { get; set; }
        public string SN码 { get; set;}
        public string 检测重量 { get; set;}
        public string 测试结果 { get; set;}
        public System.Uri 图片路径 { get; set;}
    }
    public partial class UserData
    {
        public static string DBPath => "data.db";
        public static string TableName => "生产记录";
        #region 功能


        public UserData() { }
        public UserData(string[] args)
        {
            var ps = typeof(UserData).GetProperties(BindingFlags.Instance | BindingFlags.Public);

            int len = ps.Length;
            if (len > args.Length)
            {
                len = args.Length;
            }

            for (int i = 0; i < len; i++)
            {

                if (ps[i].PropertyType == typeof(string))
                {
                    ps[i].SetValue(this, args[i]);
                    continue;
                }
                if (ps[i].PropertyType == typeof(DateTime))
                {
                    ps[i].SetValue(this, DateTime.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(Double))
                {
                    ps[i].SetValue(this, Double.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(Single))
                {
                    ps[i].SetValue(this, Single.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(Int32))
                {
                    ps[i].SetValue(this, Int32.Parse(args[i]));
                    continue;
                }

                if (ps[i].PropertyType == typeof(Int16))
                {
                    ps[i].SetValue(this, Int16.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(Int64))
                {
                    ps[i].SetValue(this, Int64.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(UInt32))
                {
                    ps[i].SetValue(this, UInt32.Parse(args[i]));
                    continue;
                }

                if (ps[i].PropertyType == typeof(UInt16))
                {
                    ps[i].SetValue(this, UInt16.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(UInt64))
                {
                    ps[i].SetValue(this, UInt64.Parse(args[i]));
                    continue;
                }
                if (ps[i].PropertyType == typeof(Uri))
                {
                    if (args[i] == null || args[i] == "")
                    {
                        ps[i].SetValue(this, null);
                        continue;
                    }
                    try
                    {
                        ps[i].SetValue(this, new Uri(args[i]));
                    }
                    catch
                    {
                        ps[i].SetValue(this, null);
                    }
                    continue;
                }
            }
        }

        /// <summary>
        /// 获取参数名
        /// </summary>
        /// <returns></returns>
        public static string[] GetNames()
        {
            var ps = typeof(UserData).GetProperties(BindingFlags.Instance | BindingFlags.Public);
            string[] names = new string[ps.Length];
            for (int i = 0; i < ps.Length; i++)
            {
                names[i] = ps[i].Name;
            }
            return names;
        }
        public override string ToString()
        {
            var ps = typeof(UserData).GetProperties(BindingFlags.Instance | BindingFlags.Public);
            string r = "";
            foreach (var item in ps)
            {
                if(item == null)
                {
                    r += ",";
                    continue;
                }
                r += item.GetValue(this) + ",";
            }
            return r.TrimEnd(',');
        }
        /// <summary>
        /// 导出CSV时用
        /// </summary>
        /// <returns></returns>
        public string ToStringCSV()
        {
            var ps = typeof(UserData).GetProperties(BindingFlags.Instance | BindingFlags.Public);
            string r = "";
            foreach (var item in ps)
            {
                if (item == null)
                {
                    r += "\"\",";
                    continue;
                }
                r += "\"" + item.GetValue(this) + "\",";
            }
            return r.TrimEnd(',');
        }


        /// <summary>
        /// 添加记录
        /// </summary>
        /// <param name="args"></param>
        public static void Add(string[] args)
        {
            UserData user = new UserData(args);
            try
            {
                DBAdd(user);
            }
            catch
            {
                MessageBox.Show("数据库存储失败");
            }

        }

        public static void DBAdd(UserData data)
        {
            using (LiteDatabase lite = new LiteDatabase(DBPath))
            {
                var lst = lite.GetCollection<UserData>(TableName);
                lst.Insert(data);
            }
        }
        public static void DBAdd(IEnumerable<UserData> datas)
        {
            using (LiteDatabase lite = new LiteDatabase(DBPath))
            {
                var lst = lite.GetCollection<UserData>(TableName);
                lst.Insert(datas);
            }
        }
        public static List<UserData> DBFindAll()
        {
            List<UserData> userDatas = new List<UserData>();
            using (LiteDatabase lite = new LiteDatabase(DBPath))
            {
                var lst = lite.GetCollection<UserData>(TableName);
                userDatas.AddRange(lst.FindAll());
            }
            return userDatas;
        }
        #endregion
    }
}
